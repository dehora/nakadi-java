plugins {
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

apply plugin: "com.github.davidmc24.gradle.plugin.avro-base"

dependencies {
    implementation project(path: ':nakadi-java-client', configuration: 'shadow')
    // avro is required by gradle avro plugin https://github.com/davidmc24/gradle-avro-plugin
    implementation project.libs.avro
    implementation project.libs.jacksonavro

    testImplementation project.libs.junit
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated/sources"]
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            artifact(jar) {
            }

            artifact(sourceJar) {
            }

            artifact(javadocJar) {
            }

            pom.withXml {

                def _name = project.name.toString()

                asNode().with {
                    appendNode('url', 'https://github.com/dehora/nakadi-java')
                    appendNode('name', _name)
                    appendNode('description', 'Client driver support')
                    appendNode('scm').with {
                        appendNode('url', 'git@github.com:dehora/nakadi-java.git')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'MIT License')
                            appendNode('url', 'https://mit-license.org/')
                        }
                    }
                }

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                def developersNode = asNode().appendNode('developers')
                def developerNode = developersNode.appendNode('developer')
                developerNode.appendNode('id', developerId)
                developerNode.appendNode('email', developerEmail)
                developerNode.appendNode('name', developerName)
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/resources/nakadi-envelope-schema", "src/test/resources/avro-schemas")
    outputDir = file("build/generated/sources")
}

tasks.named("compileJava").configure {
    source(generateAvro)
}
